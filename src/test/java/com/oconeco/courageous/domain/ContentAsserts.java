package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentAllPropertiesEquals(Content expected, Content actual) {
        assertContentAutoGeneratedPropertiesEquals(expected, actual);
        assertContentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentAllUpdatablePropertiesEquals(Content expected, Content actual) {
        assertContentUpdatableFieldsEquals(expected, actual);
        assertContentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentAutoGeneratedPropertiesEquals(Content expected, Content actual) {
        assertThat(expected)
            .as("Verify Content auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentUpdatableFieldsEquals(Content expected, Content actual) {
        assertThat(expected)
            .as("Verify Content relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getUri()).as("check uri").isEqualTo(actual.getUri()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPath()).as("check path").isEqualTo(actual.getPath()))
            .satisfies(e -> assertThat(e.getSource()).as("check source").isEqualTo(actual.getSource()))
            .satisfies(e -> assertThat(e.getParams()).as("check params").isEqualTo(actual.getParams()))
            .satisfies(e -> assertThat(e.getBodyText()).as("check bodyText").isEqualTo(actual.getBodyText()))
            .satisfies(e -> assertThat(e.getTextSize()).as("check textSize").isEqualTo(actual.getTextSize()))
            .satisfies(e -> assertThat(e.getStructuredContent()).as("check structuredContent").isEqualTo(actual.getStructuredContent()))
            .satisfies(e -> assertThat(e.getStructureSize()).as("check structureSize").isEqualTo(actual.getStructureSize()))
            .satisfies(e -> assertThat(e.getAuthor()).as("check author").isEqualTo(actual.getAuthor()))
            .satisfies(e -> assertThat(e.getLanguage()).as("check language").isEqualTo(actual.getLanguage()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getSubtype()).as("check subtype").isEqualTo(actual.getSubtype()))
            .satisfies(e -> assertThat(e.getMineType()).as("check mineType").isEqualTo(actual.getMineType()))
            .satisfies(e -> assertThat(e.getPublishDate()).as("check publishDate").isEqualTo(actual.getPublishDate()))
            .satisfies(e -> assertThat(e.getOffensiveFlag()).as("check offensiveFlag").isEqualTo(actual.getOffensiveFlag()))
            .satisfies(e -> assertThat(e.getFavicon()).as("check favicon").isEqualTo(actual.getFavicon()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdate()).as("check lastUpdate").isEqualTo(actual.getLastUpdate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContentUpdatableRelationshipsEquals(Content expected, Content actual) {
        assertThat(expected)
            .as("Verify Content relationships")
            .satisfies(e -> assertThat(e.getSearchResult()).as("check searchResult").isEqualTo(actual.getSearchResult()));
    }
}
