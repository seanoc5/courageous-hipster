package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TagAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTagAllPropertiesEquals(Tag expected, Tag actual) {
        assertTagAutoGeneratedPropertiesEquals(expected, actual);
        assertTagAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTagAllUpdatablePropertiesEquals(Tag expected, Tag actual) {
        assertTagUpdatableFieldsEquals(expected, actual);
        assertTagUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTagAutoGeneratedPropertiesEquals(Tag expected, Tag actual) {
        assertThat(expected)
            .as("Verify Tag auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTagUpdatableFieldsEquals(Tag expected, Tag actual) {
        assertThat(expected)
            .as("Verify Tag relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDefaultTag()).as("check defaultTag").isEqualTo(actual.getDefaultTag()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTagUpdatableRelationshipsEquals(Tag expected, Tag actual) {
        assertThat(expected)
            .as("Verify Tag relationships")
            .satisfies(e -> assertThat(e.getAnalyzer()).as("check analyzer").isEqualTo(actual.getAnalyzer()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getContentFragment()).as("check contentFragment").isEqualTo(actual.getContentFragment()))
            .satisfies(e -> assertThat(e.getContext()).as("check context").isEqualTo(actual.getContext()))
            .satisfies(e -> assertThat(e.getOrganization()).as("check organization").isEqualTo(actual.getOrganization()))
            .satisfies(
                e -> assertThat(e.getSearchConfiguration()).as("check searchConfiguration").isEqualTo(actual.getSearchConfiguration())
            )
            .satisfies(e -> assertThat(e.getSearchResult()).as("check searchResult").isEqualTo(actual.getSearchResult()))
            .satisfies(e -> assertThat(e.getThingType()).as("check thingType").isEqualTo(actual.getThingType()))
            .satisfies(e -> assertThat(e.getTopic()).as("check topic").isEqualTo(actual.getTopic()))
            .satisfies(e -> assertThat(e.getSearches()).as("check searches").isEqualTo(actual.getSearches()));
    }
}
