package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SearchResultAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchResultAllPropertiesEquals(SearchResult expected, SearchResult actual) {
        assertSearchResultAutoGeneratedPropertiesEquals(expected, actual);
        assertSearchResultAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchResultAllUpdatablePropertiesEquals(SearchResult expected, SearchResult actual) {
        assertSearchResultUpdatableFieldsEquals(expected, actual);
        assertSearchResultUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchResultAutoGeneratedPropertiesEquals(SearchResult expected, SearchResult actual) {
        assertThat(expected)
            .as("Verify SearchResult auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchResultUpdatableFieldsEquals(SearchResult expected, SearchResult actual) {
        assertThat(expected)
            .as("Verify SearchResult relevant properties")
            .satisfies(e -> assertThat(e.getQuery()).as("check query").isEqualTo(actual.getQuery()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getResponseBody()).as("check responseBody").isEqualTo(actual.getResponseBody()))
            .satisfies(e -> assertThat(e.getStatusCode()).as("check statusCode").isEqualTo(actual.getStatusCode()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchResultUpdatableRelationshipsEquals(SearchResult expected, SearchResult actual) {
        assertThat(expected)
            .as("Verify SearchResult relationships")
            .satisfies(e -> assertThat(e.getConfig()).as("check config").isEqualTo(actual.getConfig()))
            .satisfies(e -> assertThat(e.getSearch()).as("check search").isEqualTo(actual.getSearch()));
    }
}
