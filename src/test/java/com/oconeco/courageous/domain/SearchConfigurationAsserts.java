package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SearchConfigurationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchConfigurationAllPropertiesEquals(SearchConfiguration expected, SearchConfiguration actual) {
        assertSearchConfigurationAutoGeneratedPropertiesEquals(expected, actual);
        assertSearchConfigurationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchConfigurationAllUpdatablePropertiesEquals(SearchConfiguration expected, SearchConfiguration actual) {
        assertSearchConfigurationUpdatableFieldsEquals(expected, actual);
        assertSearchConfigurationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchConfigurationAutoGeneratedPropertiesEquals(SearchConfiguration expected, SearchConfiguration actual) {
        assertThat(expected)
            .as("Verify SearchConfiguration auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchConfigurationUpdatableFieldsEquals(SearchConfiguration expected, SearchConfiguration actual) {
        assertThat(expected)
            .as("Verify SearchConfiguration relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getDefaultConfig()).as("check defaultConfig").isEqualTo(actual.getDefaultConfig()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getParamsJson()).as("check paramsJson").isEqualTo(actual.getParamsJson()))
            .satisfies(e -> assertThat(e.getHeadersJson()).as("check headersJson").isEqualTo(actual.getHeadersJson()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchConfigurationUpdatableRelationshipsEquals(SearchConfiguration expected, SearchConfiguration actual) {
        // empty method
    }
}
