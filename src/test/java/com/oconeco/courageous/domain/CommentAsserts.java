package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CommentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAllPropertiesEquals(Comment expected, Comment actual) {
        assertCommentAutoGeneratedPropertiesEquals(expected, actual);
        assertCommentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAllUpdatablePropertiesEquals(Comment expected, Comment actual) {
        assertCommentUpdatableFieldsEquals(expected, actual);
        assertCommentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentAutoGeneratedPropertiesEquals(Comment expected, Comment actual) {
        assertThat(expected)
            .as("Verify Comment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentUpdatableFieldsEquals(Comment expected, Comment actual) {
        assertThat(expected)
            .as("Verify Comment relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdate()).as("check lastUpdate").isEqualTo(actual.getLastUpdate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommentUpdatableRelationshipsEquals(Comment expected, Comment actual) {
        assertThat(expected)
            .as("Verify Comment relationships")
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e -> assertThat(e.getContentFragment()).as("check contentFragment").isEqualTo(actual.getContentFragment()))
            .satisfies(e -> assertThat(e.getContext()).as("check context").isEqualTo(actual.getContext()))
            .satisfies(e -> assertThat(e.getOrganization()).as("check organization").isEqualTo(actual.getOrganization()))
            .satisfies(e -> assertThat(e.getSearch()).as("check search").isEqualTo(actual.getSearch()))
            .satisfies(
                e -> assertThat(e.getSearchConfiguration()).as("check searchConfiguration").isEqualTo(actual.getSearchConfiguration())
            )
            .satisfies(e -> assertThat(e.getSearchResult()).as("check searchResult").isEqualTo(actual.getSearchResult()))
            .satisfies(e -> assertThat(e.getTag()).as("check tag").isEqualTo(actual.getTag()))
            .satisfies(e -> assertThat(e.getThingType()).as("check thingType").isEqualTo(actual.getThingType()))
            .satisfies(e -> assertThat(e.getTopic()).as("check topic").isEqualTo(actual.getTopic()));
    }
}
