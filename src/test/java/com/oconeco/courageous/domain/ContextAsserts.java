package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContextAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContextAllPropertiesEquals(Context expected, Context actual) {
        assertContextAutoGeneratedPropertiesEquals(expected, actual);
        assertContextAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContextAllUpdatablePropertiesEquals(Context expected, Context actual) {
        assertContextUpdatableFieldsEquals(expected, actual);
        assertContextUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContextAutoGeneratedPropertiesEquals(Context expected, Context actual) {
        assertThat(expected)
            .as("Verify Context auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContextUpdatableFieldsEquals(Context expected, Context actual) {
        assertThat(expected)
            .as("Verify Context relevant properties")
            .satisfies(e -> assertThat(e.getLabel()).as("check label").isEqualTo(actual.getLabel()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getTime()).as("check time").isEqualTo(actual.getTime()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getIntent()).as("check intent").isEqualTo(actual.getIntent()))
            .satisfies(e -> assertThat(e.getDefaultContext()).as("check defaultContext").isEqualTo(actual.getDefaultContext()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdate()).as("check lastUpdate").isEqualTo(actual.getLastUpdate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContextUpdatableRelationshipsEquals(Context expected, Context actual) {
        assertThat(expected)
            .as("Verify Context relationships")
            .satisfies(e -> assertThat(e.getOrganization()).as("check organization").isEqualTo(actual.getOrganization()));
    }
}
