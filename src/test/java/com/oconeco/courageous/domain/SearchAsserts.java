package com.oconeco.courageous.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SearchAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchAllPropertiesEquals(Search expected, Search actual) {
        assertSearchAutoGeneratedPropertiesEquals(expected, actual);
        assertSearchAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchAllUpdatablePropertiesEquals(Search expected, Search actual) {
        assertSearchUpdatableFieldsEquals(expected, actual);
        assertSearchUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchAutoGeneratedPropertiesEquals(Search expected, Search actual) {
        assertThat(expected)
            .as("Verify Search auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchUpdatableFieldsEquals(Search expected, Search actual) {
        assertThat(expected)
            .as("Verify Search relevant properties")
            .satisfies(e -> assertThat(e.getQuery()).as("check query").isEqualTo(actual.getQuery()))
            .satisfies(e -> assertThat(e.getAdditionalParams()).as("check additionalParams").isEqualTo(actual.getAdditionalParams()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()))
            .satisfies(e -> assertThat(e.getLastUpdated()).as("check lastUpdated").isEqualTo(actual.getLastUpdated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSearchUpdatableRelationshipsEquals(Search expected, Search actual) {
        assertThat(expected)
            .as("Verify Search relationships")
            .satisfies(e -> assertThat(e.getConfiguration()).as("check configuration").isEqualTo(actual.getConfiguration()))
            .satisfies(e -> assertThat(e.getContext()).as("check context").isEqualTo(actual.getContext()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }
}
